// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import { _1_USDCE } from "./Tokens.sol";
import { Test } from "forge-std/Test.sol";
import { ERC4626 } from "solady/tokens/ERC4626.sol";

import {
    AAVE_USDC_VAULT_ID_POLYGON,
    AVVE_USDC_VAULT_ID_OPTIMISM,
    EXACTLY_USDC_VAULT_ID_OPTIMISM,
    SUPERFORM_FACTORY_POLYGON,
    SUPERFORM_ROUTER_POLYGON,
    SUPERFORM_SUPERPOSITIONS_POLYGON
} from "src/helpers/AddressBook.sol";
import {
    IBaseRouter as ISuperformRouter,
    ISharePriceOracle,
    ISuperPositions,
    ISuperformFactory
} from "src/interfaces/Lib.sol";
import {
    LiqRequest,
    MultiDstMultiVaultStateReq,
    MultiDstSingleVaultStateReq,
    SingleVaultSFData,
    SingleXChainMultiVaultStateReq,
    SingleXChainSingleVaultStateReq
} from "src/types/Lib.sol";

contract SuperformActions is Test {
    // From superform API
    bytes public constant EXACTLY_USDC_VAULT_OPTIMISM_600_USDCE_DEPOSIT_PAYLOAD =
        hex"e5672e2300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000009000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000000000000000000000000000000000000000000003938123e0000000000000000000000000000000000000000000000000000000021e147ed0000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000011e75b0bddf200000000000000000000000000000000000000000000000000000000000003e414d5307700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200e91ad9c0f40ad20d6fa4adcac1b13617d9a2b7f533c0bfb2be2bbb9f66563f25000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7374617267617465563200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000011e75b0bddf20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000759f0000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e

    bytes public constant EXACTLY_USDC_VAULT_OPTIMISM_600_USDCE_WITHDRAW_PAYLOAD =
        hex"67d70a2900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000009000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c95900000000000000000000000000000000000000000000000000000000037a1e050000000000000000000000000000000000000000000000000000000003ab8f490000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    bytes public constant EXACTLY_USDC_CRAFT_VAULT_OPTIMISM_1200_USDCE_DEPOSIT_PAYLOAD =
        hex"881d42bb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c200000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000000000000000000000000000000000000000000ce00000000000000000000000000000000000000000000000000000000000000002000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000a00000001b13445ee4ddc7412654999669c01dcfed0fb70060000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000003936df6c000000000000000000000000000000000000000000000000000000003936e06600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000021e0920e000000000000000000000000000000000000000000000000000000001fd4c44e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc43160000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020042dad51029b80e277fc4e46004cc6929944b7219511a1023075ecb9fea4c8b93000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000023c24ba40000000000000000000000000000000000000000000000000de0558caf3c580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b8327f0000000000000000000000000000000000000000000000000000000067b856d30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc431600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200808decdb049038c464213614dc0861c998e0be27d68f17a8a4099670415cdd7c000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000023c24c400000000000000000000000000000000000000000000000000de055c93871800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b8327f0000000000000000000000000000000000000000000000000000000067b856d

    bytes public constant EXACTLY_USDC_CRAFT_VAULT_OPTIMISM_1200_USDCE_WITHDRAW_PAYLOAD =
        hex"87493e2100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000580000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000002000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000a00000001b13445ee4ddc7412654999669c01dcfed0fb7006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000037a1e05000000000000000000000000000000000000000000000000000000002094718e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000003ab8f4c000000000000000000000000000000000000000000000000000000002499a11800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000001f6800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    bytes public constant USDC_VAULTS_OPTIMISM_POLYGON_1200_USDCE_DEPOSIT_PAYLOAD =
        hex"ae1068f200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa0000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000640000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000000000000000000000000000000000000000000003936df6c0000000000000000000000000000000000000000000000000000000021e091f70000000000000000000000000000000000000000000000000000000000001f68000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc431600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200d26135e2b404cbaa61d4082480177bebe037cf7c61401af5429eddc34c526b7b000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000023c24ba40000000000000000000000000000000000000000000000000de0558caf3c580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b8337b0000000000000000000000000000000000000000000000000000000067b856f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089000000019111bbdf36e089e5fda159265fa2eabd37b66a72000000000000000000000000000000000000000000000000000000003936b8f3000000000000000000000000000000000000000000000000000000001f8205bb0000000000000000000000000000000000000000000000000000000000001f68000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc431600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200c0252c38a0525187e910b41043099a77521a379be0967d34b810a50f5efaa49c000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c3460000000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000023c233980000000000000000000000000000000000000000000000000de04c37d794900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b8337b0000000000000000000000000000000000000000000000000000000067b856f70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    bytes public constant USDC_VAULTS_OPTIMISM_POLYGON_1200_USDCE_WITHDRAW_PAYLOAD =
        hex"178f003800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa00000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c0000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c95900000000000000000000000000000000000000000000000000000000037a1e050000000000000000000000000000000000000000000000000000000003ab8f500000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000210500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089000000019111bbdf36e089e5fda159265fa2eabd37b66a720000000000000000000000000000000000000000000000000000000021cb140d00000000000000000000000000000000000000000000000000000000265a308f0000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    bytes public constant EXACTLY_AAVE_ALOE_OPTIMISM_1800_USDCE_DEPOSIT_PAYLOAD =
        hex"f9d4f18c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa0000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d40000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c200000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000000000000000000000000000000000000000000ce00000000000000000000000000000000000000000000000000000000000000002000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000a00000001b13445ee4ddc7412654999669c01dcfed0fb7006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000405daec000000000000000000000000000000000000000000000000000000000405daf4900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000021e087fe000000000000000000000000000000000000000000000000000000001fd4ba3c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000244000000000000000000000000000000000000000000000000000000000000024400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc431600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200f84e5653e79b7e9cc74d6f18a2b628328ce05d8873dd9abf3af704c7eae3420b000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000023c244a40000000000000000000000000000000000000000000000000de052d54c07ad5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b838430000000000000000000000000000000000000000000000000000000067b85c320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc43160000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020088f95759d90f75dea560d7bb7d3cb9493a5f24eb6f763bfdb50df9468049d104000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000023c244f00000000000000000000000000000000000000000000000000de052f2c9f3a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b838430000000000000000000000000000000000000000000000000000000067b85ca000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000007200000000000000000000000000000000000000000000000000000000000000760000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000000010000000000000089000000019111bbdf36e089e5fda159265fa2eabd37b66a72000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000405d8ffc0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001f82021c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000024400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036428cc431600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200069cc6b4ed6dd2179bdcaddfc9b336cd6e03bf3c5d0dc5b6ca570062b0f7029f000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000003721b0e122768ceddfb3dec810e64c361177f8260000000000000000000000000000000000000000000000000000000023c3460000000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066163726f73730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d7375706572666f726d2e78797a000000000000000000000000000000000000000000000000000000000000003721b0e122768ceddfb3dec810e64c361177f826000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000023c2338c0000000000000000000000000000000000000000000000000de04c332f7cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067b838430000000000000000000000000000000000000000000000000000000067b85c

    bytes public constant EXACTLY_AAVE_ALOE_OPTIMISM_1800_USDCE_WITHDRAW_PAYLOAD =
        hex"165b7a3b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa0000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000580000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000002000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000a00000001b13445ee4ddc7412654999669c01dcfed0fb7006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000037a1e05000000000000000000000000000000000000000000000000000000002094718e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000003ab8f53000000000000000000000000000000000000000000000000000000002499a16100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000001f6800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bdaa000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000010000000000000089000000019111bbdf36e089e5fda159265fa2eabd37b66a7200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000021cb140d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000265a30b000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001f680000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda

    bytes public constant EXACTLY_AAVE_PAYLOAD_MULTI_MULTI =
        hex"165b7a3b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000010000000000000089000000019111bbdf36e089e5fda159265fa2eabd37b66a7200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000021cb140d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000265a54d3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000005f10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bdac00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000580000000000000000000000000ad8400d4f96926d7b7e66e749a1ed8029649b36e000000000000000000000000ec2a41295171e2028542ca82f1801ca1f356388b00000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000002000000000000000a00000001738c5f15ab47eb018539c955b3341034a978c959000000000000000a00000001b13445ee4ddc7412654999669c01dcfed0fb7006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000037a1e05000000000000000000000000000000000000000000000000000000002094718e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000003ab9253000000000000000000000000000000000000000000000000000000002499c247000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000005f100000000000000000000000000000000000000000000000000000000000005f100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000021050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda

    uint64[7] public DST_CHAINS = [
        1, // Ethereum Mainnet
        137, // Polygon
        56, // Bnb
        10, // Optimism
        8453, // Base
        42_161, // Arbitrum One
        43_114 // Avalanche
    ];

    mapping(uint64 chainId => uint256 forkId) forks;
    mapping(uint256 superformId => mapping(uint256 amount => bytes payload)) public depositPayloads;
    mapping(uint256 superformId => mapping(uint256 amount => bytes payload)) public withdrawPayloads;
    mapping(uint256 superformId => mapping(uint256 amount => uint256 nativeValue)) public depositValues;
    mapping(uint256 superformId => mapping(uint256 amount => uint256 nativeValue)) public withdrawValues;

    mapping(bytes32 key => bytes payload) public multiVaultDepositPayloads;
    mapping(bytes32 key => bytes payload) public multiVaultWithdrawPayloads;
    mapping(bytes32 key => uint256 nativeValue) public multiVaultDepositValues;
    mapping(bytes32 key => uint256 nativeValue) public multiVaultWithdrawValues;

    mapping(bytes32 key => bytes payload) public multiChainDepositPayloads;
    mapping(bytes32 key => bytes payload) public multiChainWithdrawPayloads;
    mapping(bytes32 key => uint256 nativeValue) public multiChainDepositValues;
    mapping(bytes32 key => uint256 nativeValue) public multiChainWithdrawValues;

    mapping(bytes32 key => bytes payload) public multiChainMultiVaultDepositPayloads;
    mapping(bytes32 key => bytes payload) public multiChainMultiVaultWithdrawPayloads;
    mapping(bytes32 key => uint256 nativeValue) public multiChainMultiVaultDepositValues;
    mapping(bytes32 key => uint256 nativeValue) public multiChainMultiVaultWithdrawValues;

    ISuperPositions public superPositions;
    ISuperformRouter public vaultRouter;
    ISuperformFactory public factory;

    function setUp() public virtual {
        setupSingleVault();
        setupSingleXChainMultiVault();
        setupMultiVaultSingleChainVault();
        setupMultiXChaintMultiVault();

        superPositions = ISuperPositions(SUPERFORM_SUPERPOSITIONS_POLYGON);
        vaultRouter = ISuperformRouter(SUPERFORM_ROUTER_POLYGON);
        factory = ISuperformFactory(SUPERFORM_FACTORY_POLYGON);

        forks[DST_CHAINS[0]] = vm.createFork(vm.envString("RPC_MAINNET"), 20_819_300);
        forks[DST_CHAINS[1]] = vm.createFork(vm.envString("RPC_POLYGON"), 68_186_888);
        forks[DST_CHAINS[3]] = vm.createFork(vm.envString("RPC_OPTIMISM"), 132_263_339);
        forks[DST_CHAINS[4]] = vm.createFork(vm.envString("RPC_BASE"), 1);
        forks[DST_CHAINS[5]] = vm.createFork(vm.envString("RPC_ARBITRUM"), 1);
        forks[DST_CHAINS[6]] = vm.createFork(vm.envString("RPC_ARBITRUM"), 1);
    }

    function setupSingleVault() public {
        depositPayloads[EXACTLY_USDC_VAULT_ID_OPTIMISM][600 * _1_USDCE] =
            EXACTLY_USDC_VAULT_OPTIMISM_600_USDCE_DEPOSIT_PAYLOAD;
        withdrawPayloads[EXACTLY_USDC_VAULT_ID_OPTIMISM][600 * _1_USDCE] =
            EXACTLY_USDC_VAULT_OPTIMISM_600_USDCE_WITHDRAW_PAYLOAD;
        depositValues[EXACTLY_USDC_VAULT_ID_OPTIMISM][600 * _1_USDCE] = 128_472_007_562_734;
        withdrawValues[EXACTLY_USDC_VAULT_ID_OPTIMISM][600 * _1_USDCE] = 35_404_300_433_882;
    }

    function setupSingleXChainMultiVault() public {
        uint256[] memory singleXChainMultiVaultIds = new uint256[](2);
        singleXChainMultiVaultIds[0] = EXACTLY_USDC_VAULT_ID_OPTIMISM;
        singleXChainMultiVaultIds[1] = AVVE_USDC_VAULT_ID_OPTIMISM;

        uint256[] memory multiVaultAmounts = new uint256[](2);
        multiVaultAmounts[0] = 600 * _1_USDCE;
        multiVaultAmounts[1] = 600 * _1_USDCE;

        uint64[] memory chainIds = new uint64[](2);
        chainIds[0] = 10; // Optimism
        chainIds[1] = 137; // Polygon

        bytes32 multiVaultKey = _getMultiVaultPayloadKey(singleXChainMultiVaultIds, multiVaultAmounts);
        multiVaultDepositPayloads[multiVaultKey] = EXACTLY_USDC_CRAFT_VAULT_OPTIMISM_1200_USDCE_DEPOSIT_PAYLOAD;
        multiVaultWithdrawPayloads[multiVaultKey] = EXACTLY_USDC_CRAFT_VAULT_OPTIMISM_1200_USDCE_WITHDRAW_PAYLOAD;

        //singlechainmultiVault
        multiVaultDepositValues[multiVaultKey] = 115_262_433_677_932;
        multiVaultWithdrawValues[multiVaultKey] = 39_486_861_225_942;
    }

    function setupMultiVaultSingleChainVault() public {
        uint256[] memory multiXChainSingleVaultIds = new uint256[](2);
        multiXChainSingleVaultIds[0] = EXACTLY_USDC_VAULT_ID_OPTIMISM;
        multiXChainSingleVaultIds[1] = AAVE_USDC_VAULT_ID_POLYGON;

        uint256[] memory multiVaultAmounts = new uint256[](2);
        multiVaultAmounts[0] = 600 * _1_USDCE;
        multiVaultAmounts[1] = 600 * _1_USDCE;

        bytes32 multiVaultKey = _getMultiVaultPayloadKey(multiXChainSingleVaultIds, multiVaultAmounts);

        multiChainDepositPayloads[multiVaultKey] = USDC_VAULTS_OPTIMISM_POLYGON_1200_USDCE_DEPOSIT_PAYLOAD;
        multiChainWithdrawPayloads[multiVaultKey] = USDC_VAULTS_OPTIMISM_POLYGON_1200_USDCE_WITHDRAW_PAYLOAD;

        //multiChainsingleVault
        multiChainDepositValues[multiVaultKey] = 330_160_575_729_854;
        multiChainWithdrawValues[multiVaultKey] = 188_577_542_437_653;
    }

    function setupMultiXChaintMultiVault() public {
        uint256[] memory multiXChainMultiVaultIds = new uint256[](3);
        multiXChainMultiVaultIds[0] = EXACTLY_USDC_VAULT_ID_OPTIMISM;
        multiXChainMultiVaultIds[1] = AAVE_USDC_VAULT_ID_POLYGON;
        multiXChainMultiVaultIds[2] = AVVE_USDC_VAULT_ID_OPTIMISM;

        uint256[] memory multiVaultAmounts = new uint256[](3);
        multiVaultAmounts[0] = 600 * _1_USDCE;
        multiVaultAmounts[1] = 600 * _1_USDCE;
        multiVaultAmounts[2] = 600 * _1_USDCE;

        bytes32 multiVaultKey = _getMultiVaultPayloadKey(multiXChainMultiVaultIds, multiVaultAmounts);

        multiChainMultiVaultDepositPayloads[multiVaultKey] = EXACTLY_AAVE_ALOE_OPTIMISM_1800_USDCE_DEPOSIT_PAYLOAD;
        multiChainMultiVaultWithdrawPayloads[multiVaultKey] = EXACTLY_AAVE_ALOE_OPTIMISM_1800_USDCE_WITHDRAW_PAYLOAD;

        //multiChainmultiVault
        multiChainMultiVaultDepositValues[multiVaultKey] = 1_201_064_630_786_235;
        multiChainMultiVaultWithdrawValues[multiVaultKey] = 393_985_811_095_915;
    }

    function _mintSuperpositions(address to, uint256 superformId, uint256 amount) internal {
        vm.startPrank(address(vaultRouter));
        superPositions.mintSingle(to, superformId, amount);
        vm.stopPrank();
    }

    function _previewDeposit(uint64 chainId, address vault, uint256 assets) internal returns (uint256 shares) {
        uint256 _tempCurrentFork = vm.activeFork();
        vm.selectFork(forks[chainId]);
        shares = ERC4626(vault).previewDeposit(assets);
        vm.selectFork(_tempCurrentFork);
        return shares;
    }

    function _previewRedeem(uint64 chainId, address vault, uint256 shares) internal returns (uint256 assets) {
        uint256 _tempCurrentFork = vm.activeFork();
        vm.selectFork(forks[chainId]);
        assets = ERC4626(vault).previewRedeem(shares);
        vm.selectFork(_tempCurrentFork);
        return assets;
    }

    function _convertToAssets(uint64 chainId, address vault, uint256 shares) internal returns (uint256 assets) {
        uint256 _tempCurrentFork = vm.activeFork();
        vm.selectFork(forks[chainId]);
        assets = ERC4626(vault).convertToAssets(shares);
        vm.selectFork(_tempCurrentFork);
        return assets;
    }

    function _getSharePrice(uint64 chainId, address _vault) internal returns (uint256 sharePrice) {
        uint256 _tempCurrentFork = vm.activeFork();
        vm.selectFork(forks[chainId]);
        ERC4626 vault = ERC4626(_vault);
        sharePrice = vault.convertToAssets(10 ** vault.decimals());
        vm.selectFork(_tempCurrentFork);
        return sharePrice;
    }

    function _getDecimals(uint64 chainId, address vault) internal returns (uint8 decimals) {
        uint256 _tempCurrentFork = vm.activeFork();
        vm.selectFork(forks[chainId]);
        decimals = ERC4626(vault).decimals();
        vm.selectFork(_tempCurrentFork);
        return decimals;
    }

    function _buildInvestSingleXChainSingleVaultParams(
        uint256 _superformId,
        uint256 _amount
    )
        internal
        view
        returns (SingleXChainSingleVaultStateReq memory req)
    {
        bytes memory payload = depositPayloads[_superformId][_amount];
        return _decodeSingleXChainSingleVaultStateReq(payload);
    }

    function _buildDivestSingleXChainSingleVaultParams(
        uint256 _superformId,
        uint256 _amount
    )
        internal
        view
        returns (SingleXChainSingleVaultStateReq memory req)
    {
        bytes memory payload = withdrawPayloads[_superformId][_amount];
        return _decodeSingleXChainSingleVaultStateReq(payload);
    }

    function _buildInvestSingleXChainMultiVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (SingleXChainMultiVaultStateReq memory req)
    {
        require(_superformIds.length == _amounts.length, "Array length mismatch");
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiVaultDepositPayloads[key];
        return _decodeSingleXChainMultiVaultStateReq(payload);
    }

    function _buildDivestSingleXChainMultiVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (SingleXChainMultiVaultStateReq memory req)
    {
        require(_superformIds.length == _amounts.length, "Array length mismatch");
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiVaultWithdrawPayloads[key];
        return _decodeSingleXChainMultiVaultStateReq(payload);
    }

    function _buildInvestMultiXChainSingleVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (MultiDstSingleVaultStateReq memory req)
    {
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiChainDepositPayloads[key];
        return _decodeMultiXChainSingleVaultStateReq(payload);
    }

    function _buildDivestMultiXChainSingleVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (MultiDstSingleVaultStateReq memory req)
    {
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiChainWithdrawPayloads[key];
        return _decodeMultiXChainSingleVaultStateReq(payload);
    }

    function _buildInvestMultiXChainMultiVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (MultiDstMultiVaultStateReq memory req)
    {
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiChainMultiVaultDepositPayloads[key];
        return _decodeMultiXChainMultiVaultStateReq(payload);
    }

    function _buildDivestMultiXChainMultiVaultParams(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        view
        returns (MultiDstMultiVaultStateReq memory req)
    {
        bytes32 key = _getMultiVaultPayloadKey(_superformIds, _amounts);
        bytes memory payload = multiChainMultiVaultWithdrawPayloads[key];
        return _decodeMultiXChainMultiVaultStateReq(payload);
    }

    function _buildDivestMultiXChainMultiVaultParamsReedeam()
        internal
        pure
        returns (MultiDstMultiVaultStateReq memory req)
    {
        return _decodeMultiXChainMultiVaultStateReq(EXACTLY_AAVE_PAYLOAD_MULTI_MULTI);
    }

    function _buildWithdrawSingleXChainSingleVaultParams(
        uint256 _superformId,
        uint256 _amount
    )
        public
        view
        returns (
            uint8[] memory ambIds,
            uint256 outputAmount,
            uint256 maxSlippage,
            LiqRequest memory liqRequest,
            bool hasDstSwap
        )
    {
        bytes memory payload = withdrawPayloads[_superformId][_amount];
        SingleXChainSingleVaultStateReq memory req = _decodeSingleXChainSingleVaultStateReq(payload);
        (ambIds, outputAmount, maxSlippage, liqRequest, hasDstSwap) = (
            req.ambIds,
            req.superformData.outputAmount,
            req.superformData.maxSlippage,
            req.superformData.liqRequest,
            req.superformData.hasDstSwap
        );
    }

    function _getInvestSingleXChainSingleVaultValue(
        uint256 _superformId,
        uint256 _amount
    )
        internal
        view
        returns (uint256 value)
    {
        return depositValues[_superformId][_amount];
    }

    function _getDivestSingleXChainSingleVaultValue(
        uint256 _superformId,
        uint256 _amount
    )
        internal
        view
        returns (uint256 value)
    {
        return withdrawValues[_superformId][_amount];
    }

    function _getWithdrawSingleXChainSingleVaultValue(
        uint256 _superformId,
        uint256 _amount
    )
        internal
        view
        returns (uint256 value)
    {
        return withdrawValues[_superformId][_amount];
    }

    function _decodeSingleXChainSingleVaultStateReq(bytes memory payload)
        private
        pure
        returns (SingleXChainSingleVaultStateReq memory req)
    {
        req = abi.decode(slice(payload, 4, payload.length - 4), (SingleXChainSingleVaultStateReq));
        return req;
    }

    function _decodeSingleXChainMultiVaultStateReq(bytes memory payload)
        private
        pure
        returns (SingleXChainMultiVaultStateReq memory req)
    {
        req = abi.decode(slice(payload, 4, payload.length - 4), (SingleXChainMultiVaultStateReq));
        return req;
    }

    function _decodeMultiXChainSingleVaultStateReq(bytes memory payload)
        private
        pure
        returns (MultiDstSingleVaultStateReq memory req)
    {
        req = abi.decode(slice(payload, 4, payload.length - 4), (MultiDstSingleVaultStateReq));
        return req;
    }

    function _decodeMultiXChainMultiVaultStateReq(bytes memory payload)
        private
        pure
        returns (MultiDstMultiVaultStateReq memory req)
    {
        req = abi.decode(slice(payload, 4, payload.length - 4), (MultiDstMultiVaultStateReq));
        return req;
    }

    function _getMultiVaultPayloadKey(
        uint256[] memory _superformIds,
        uint256[] memory _amounts
    )
        internal
        pure
        returns (bytes32)
    {
        return keccak256(abi.encode(_superformIds, _amounts));
    }

    function getSelector(bytes memory _data) private pure returns (bytes4 sig) {
        assembly {
            sig := mload(add(_data, 32))
        }
    }

    function slice(bytes memory _bytes, uint256 _start, uint256 _length) private pure returns (bytes memory) {
        require(_bytes.length >= (_start + _length));

        bytes memory tempBytes;

        assembly {
            switch iszero(_length)
            case 0 {
                // Get a location of some free memory and store it in tempBytes as
                // Solidity does for memory variables.
                tempBytes := mload(0x40)

                // The first word of the slice result is potentially a partial
                // word read from the original array. To read it, we calculate
                // the length of that partial word and start copying that many
                // bytes into the array. The first word we copy will start with
                // data we don't care about, but the last `lengthmod` bytes will
                // land at the beginning of the contents of the new array. When
                // we're done copying, we overwrite the full first word with
                // the actual length of the slice.
                let lengthmod := and(_length, 31)

                // The multiplication in the next line is necessary
                // because when slicing multiples of 32 bytes (lengthmod == 0)
                // the following copy loop was copying the origin's length
                // and then ending prematurely not copying everything it should.
                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))
                let end := add(mc, _length)

                for {
                    // The multiplication in the next line has the same exact purpose
                    // as the one above.
                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)
                } lt(mc, end) {
                    mc := add(mc, 0x20)
                    cc := add(cc, 0x20)
                } { mstore(mc, mload(cc)) }

                mstore(tempBytes, _length)

                //update free-memory pointer
                //allocating the array padded to 32 bytes like the compiler does now
                mstore(0x40, and(add(mc, 31), not(31)))
            }
            //if we want a zero-length slice let's just return a zero-length array
            default {
                tempBytes := mload(0x40)

                mstore(0x40, add(tempBytes, 0x20))
            }
        }

        return tempBytes;
    }
}
